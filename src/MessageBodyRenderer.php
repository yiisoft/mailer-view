<?php

declare(strict_types=1);

namespace Yiisoft\Mailer\View;

use Yiisoft\Mailer\MessageInterface;
use Yiisoft\View\Exception\ViewNotFoundException;
use Yiisoft\View\View;

/**
 * View renderer used to compose message body.
 *
 * @api
 */
final class MessageBodyRenderer
{
    /**
     * @param View $view The view instance.
     * @param MessageBodyTemplate $template The message body template instance.
     */
    public function __construct(
        private View $view,
        private MessageBodyTemplate $template
    ) {
    }

    /**
     * Returns a new instance with the specified view.
     *
     * @param View $view The view instance.
     *
     * @return self The new instance.
     */
    public function withView(View $view): self
    {
        $new = clone $this;
        $new->view = $view;
        return $new;
    }

    /**
     * Returns a new instance with the specified message body template.
     *
     * @param MessageBodyTemplate $template The message body template.
     *
     * @return self The new instance.
     */
    public function withTemplate(MessageBodyTemplate $template): self
    {
        $new = clone $this;
        $new->template = $template;
        return $new;
    }

    /**
     * Returns a new instance with specified locale code.
     *
     * @param string $locale The locale code.
     */
    public function withLocale(string $locale): self
    {
        $new = clone $this;
        $new->view = $this->view->withLocale($locale);
        return $new;
    }

    /**
     * Adds the rendered body to the message and returns it.
     *
     * @param MessageInterface $message The message to which the body will be added.
     * @param string $htmlView The view name to be used for rendering the message HTML body.
     * @param string|null $textView The view name to be used for rendering the message text body. If `null`, the text
     * body will be generated by strip tags in HTML body.
     * @param array $viewParameters The parameters (name-value pairs) that will be extracted and available in
     * the view file.
     * @param array $layoutParameters The parameters (name-value pairs) that will be extracted and available in
     * the layout file.
     *
     * @return MessageInterface The message with the added body.
     *
     * @throws ViewNotFoundException If the view file does not exist.
     */
    public function addBodyToMessage(
        MessageInterface $message,
        string $htmlView,
        ?string $textView = null,
        array $viewParameters = [],
        array $layoutParameters = [],
    ): MessageInterface {
        $html = $this->renderHtml($htmlView, $viewParameters, $layoutParameters);

        $text = $textView === null
            ? $this->generateTextBodyFromHtml($html)
            : $this->renderText($textView, $viewParameters, $layoutParameters);

        return $message
            ->withHtmlBody($html)
            ->withTextBody($text);
    }

    /**
     * Renders the HTML view specified with optional parameters and layout.
     *
     * @param string $view The view name of the view file.
     * @param array $viewParameters The parameters (name-value pairs) that will be extracted and available in
     * the view file.
     * @param array $layoutParameters The parameters (name-value pairs) that will be extracted and available in
     * the layout file.
     *
     * @see View::render()
     *
     * @return string The rendering HTML result.
     *
     * @throws ViewNotFoundException If the view file does not exist.
     */
    public function renderHtml(string $view, array $viewParameters = [], array $layoutParameters = []): string
    {
        $content = $this->view
            ->withContextPath($this->template->viewPath)
            ->render($view, $viewParameters);

        if ($this->template->htmlLayout === null) {
            return $content;
        }

        $layoutParameters['content'] = $content;
        return $this->view
            ->withContextPath($this->template->viewPath)
            ->render($this->template->htmlLayout, $layoutParameters);
    }

    /**
     * Renders the text view specified with optional parameters and layout.
     *
     * @param string $view The view name of the view file.
     * @param array $viewParameters The parameters (name-value pairs) that will be extracted and available in
     * the view file.
     * @param array $layoutParameters The parameters (name-value pairs) that will be extracted and available in
     * the layout file.
     *
     * @see View::render()
     *
     * @return string The rendering text result.
     *
     * @throws ViewNotFoundException If the view file does not exist.
     */
    public function renderText(string $view, array $viewParameters = [], array $layoutParameters = []): string
    {
        $content = $this->view
            ->withContextPath($this->template->viewPath)
            ->render($view, $viewParameters);

        if ($this->template->textLayout === null) {
            return $content;
        }

        $layoutParameters['content'] = $content;
        return $this->view
            ->withContextPath($this->template->viewPath)
            ->render($this->template->textLayout, $layoutParameters);
    }

    /**
     * Generates a text body from an HTML body.
     *
     * @param string $html The HTML body.
     *
     * @return string The text body.
     */
    private function generateTextBodyFromHtml(string $html): string
    {
        if (preg_match('~<body[^>]*>(.*?)</body>~is', $html, $match)) {
            $html = $match[1];
        }

        // remove style and script
        $html = preg_replace('~<((style|script))[^>]*>(.*?)</\1>~is', '', $html);

        // strip all HTML tags and decode HTML entities
        $text = html_entity_decode(strip_tags($html), ENT_QUOTES | ENT_HTML5);

        // improve whitespace
        $text = preg_replace("~^[ \t]+~m", '', trim($text));
        return preg_replace('~\R\R+~mu', "\n\n", $text);
    }
}
